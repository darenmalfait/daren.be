# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  blog(relativePath: String): Blog!
  blogConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BlogFilter): BlogConnection!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GlobalFilter): GlobalConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  product(relativePath: String): Product!
  productConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ProductFilter): ProductConnection!
  tags(relativePath: String): Tags!
  tagsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: TagsFilter): TagsConnection!
  wiki(relativePath: String): Wiki!
  wikiConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: WikiFilter): WikiConnection!
}

input DocumentFilter {
  blog: BlogFilter
  global: GlobalFilter
  page: PageFilter
  product: ProductFilter
  tags: TagsFilter
  wiki: WikiFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Blog | Global | Page | Product | Tags | Wiki

type BlogSeo {
  title: String
  description: String
  canonical: String
  seoImg: String
  partialSeoImage: String
  cardType: String
}

type Blog implements Node & Document {
  seo: BlogSeo
  title: String!
  tags: [String]
  category: String!
  heroImg: String
  excerpt: String
  date: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BlogSeoFilter {
  title: StringFilter
  description: StringFilter
  canonical: StringFilter
  seoImg: ImageFilter
  partialSeoImage: ImageFilter
  cardType: StringFilter
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input BlogBodyImageFilter {
  src: ImageFilter
  alt: StringFilter
  compact: BooleanFilter
}

input BlogBodyButtonFilter {
  href: StringFilter
  text: StringFilter
  variant: StringFilter
}

input BlogBodyContactFormFilter {
  heading: StringFilter
}

input BlogBodyFilter {
  image: BlogBodyImageFilter
  Button: BlogBodyButtonFilter
  ContactForm: BlogBodyContactFormFilter
}

input BlogFilter {
  seo: BlogSeoFilter
  title: StringFilter
  tags: StringFilter
  category: StringFilter
  heroImg: ImageFilter
  excerpt: StringFilter
  date: DatetimeFilter
  body: BlogBodyFilter
}

type BlogConnectionEdges {
  cursor: String!
  node: Blog
}

type BlogConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BlogConnectionEdges]
}

type GlobalNavigationMain {
  href: String!
  label: String!
  isButton: Boolean
}

type GlobalNavigationActions {
  href: String!
  label: String!
  isButton: Boolean
}

type GlobalNavigation {
  main: [GlobalNavigationMain]
  actions: [GlobalNavigationActions]
}

type GlobalSocial {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

type GlobalPaths {
  wiki: String
  blog: String
  contact: String
}

type GlobalCompanyInfo {
  companyName: String
  vat: String
}

type Global implements Node & Document {
  navigation: GlobalNavigation
  social: GlobalSocial
  paths: GlobalPaths
  companyInfo: GlobalCompanyInfo
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input GlobalNavigationMainFilter {
  href: StringFilter
  label: StringFilter
  isButton: BooleanFilter
}

input GlobalNavigationActionsFilter {
  href: StringFilter
  label: StringFilter
  isButton: BooleanFilter
}

input GlobalNavigationFilter {
  main: GlobalNavigationMainFilter
  actions: GlobalNavigationActionsFilter
}

input GlobalSocialFilter {
  facebook: StringFilter
  twitter: StringFilter
  instagram: StringFilter
  github: StringFilter
}

input GlobalPathsFilter {
  wiki: StringFilter
  blog: StringFilter
  contact: StringFilter
}

input GlobalCompanyInfoFilter {
  companyName: StringFilter
  vat: StringFilter
}

input GlobalFilter {
  navigation: GlobalNavigationFilter
  social: GlobalSocialFilter
  paths: GlobalPathsFilter
  companyInfo: GlobalCompanyInfoFilter
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type PageSeo {
  title: String
  description: String
  canonical: String
  seoImg: String
  partialSeoImage: String
  cardType: String
}

type PageBlocksBigTitleAction {
  title: String
  label: String
  href: String
}

type PageBlocksBigTitle {
  title: String
  action: PageBlocksBigTitleAction
}

type PageBlocksBlogHeader {
  title: String
  subtitle: String
  link: String
  image: String
}

type PageBlocksBlog {
  header: PageBlocksBlogHeader
  searchEnabled: Boolean
  featuredEnabled: Boolean
  tags: [String]
  count: Float
}

type PageBlocksContent {
  body: JSON
}

type PageBlocksFeaturesItems {
  title: String
  description: String
  icon: String
}

type PageBlocksFeatures {
  title: String
  subTitle: String
  items: [PageBlocksFeaturesItems]
}

type PageBlocksHeroImage {
  src: String
  alt: String
}

type PageBlocksHero {
  title: String
  text: JSON
  image: PageBlocksHeroImage
}

type PageBlocksKeywordList {
  title: String
  keywords: [String]
}

type PageBlocksWikiHeader {
  title: String
  subtitle: String
  link: String
  image: String
}

type PageBlocksWiki {
  header: PageBlocksWikiHeader
  searchEnabled: Boolean
  tags: [String]
  count: Float
}

type PageBlocksProductsHeader {
  title: String
  subtitle: String
  link: String
}

type PageBlocksProducts {
  header: PageBlocksProductsHeader
  tags: [String]
  count: Float
}

union PageBlocks = PageBlocksBigTitle | PageBlocksBlog | PageBlocksContent | PageBlocksFeatures | PageBlocksHero | PageBlocksKeywordList | PageBlocksWiki | PageBlocksProducts

type Page implements Node & Document {
  seo: PageSeo
  title: String!
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PageSeoFilter {
  title: StringFilter
  description: StringFilter
  canonical: StringFilter
  seoImg: ImageFilter
  partialSeoImage: ImageFilter
  cardType: StringFilter
}

input PageBlocksBigTitleActionFilter {
  title: StringFilter
  label: StringFilter
  href: StringFilter
}

input PageBlocksBigTitleFilter {
  title: StringFilter
  action: PageBlocksBigTitleActionFilter
}

input PageBlocksBlogHeaderFilter {
  title: StringFilter
  subtitle: StringFilter
  link: StringFilter
  image: ImageFilter
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input PageBlocksBlogFilter {
  header: PageBlocksBlogHeaderFilter
  searchEnabled: BooleanFilter
  featuredEnabled: BooleanFilter
  tags: StringFilter
  count: NumberFilter
}

input PageBlocksContentBodyImageFilter {
  src: ImageFilter
  alt: StringFilter
  compact: BooleanFilter
}

input PageBlocksContentBodyButtonFilter {
  href: StringFilter
  text: StringFilter
  variant: StringFilter
}

input PageBlocksContentBodyContactFormFilter {
  heading: StringFilter
}

input PageBlocksContentBodyFilter {
  image: PageBlocksContentBodyImageFilter
  Button: PageBlocksContentBodyButtonFilter
  ContactForm: PageBlocksContentBodyContactFormFilter
}

input PageBlocksContentFilter {
  body: PageBlocksContentBodyFilter
}

input PageBlocksFeaturesItemsFilter {
  title: StringFilter
  description: StringFilter
  icon: StringFilter
}

input PageBlocksFeaturesFilter {
  title: StringFilter
  subTitle: StringFilter
  items: PageBlocksFeaturesItemsFilter
}

input PageBlocksHeroTextImageFilter {
  src: ImageFilter
  alt: StringFilter
  compact: BooleanFilter
}

input PageBlocksHeroTextButtonFilter {
  href: StringFilter
  text: StringFilter
  variant: StringFilter
}

input PageBlocksHeroTextContactFormFilter {
  heading: StringFilter
}

input PageBlocksHeroTextFilter {
  image: PageBlocksHeroTextImageFilter
  Button: PageBlocksHeroTextButtonFilter
  ContactForm: PageBlocksHeroTextContactFormFilter
}

input PageBlocksHeroImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input PageBlocksHeroFilter {
  title: StringFilter
  text: PageBlocksHeroTextFilter
  image: PageBlocksHeroImageFilter
}

input PageBlocksKeywordListFilter {
  title: StringFilter
  keywords: StringFilter
}

input PageBlocksWikiHeaderFilter {
  title: StringFilter
  subtitle: StringFilter
  link: StringFilter
  image: ImageFilter
}

input PageBlocksWikiFilter {
  header: PageBlocksWikiHeaderFilter
  searchEnabled: BooleanFilter
  tags: StringFilter
  count: NumberFilter
}

input PageBlocksProductsHeaderFilter {
  title: StringFilter
  subtitle: StringFilter
  link: StringFilter
}

input PageBlocksProductsFilter {
  header: PageBlocksProductsHeaderFilter
  tags: StringFilter
  count: NumberFilter
}

input PageBlocksFilter {
  bigTitle: PageBlocksBigTitleFilter
  Blog: PageBlocksBlogFilter
  content: PageBlocksContentFilter
  features: PageBlocksFeaturesFilter
  hero: PageBlocksHeroFilter
  KeywordList: PageBlocksKeywordListFilter
  Wiki: PageBlocksWikiFilter
  products: PageBlocksProductsFilter
}

input PageFilter {
  seo: PageSeoFilter
  title: StringFilter
  blocks: PageBlocksFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Product implements Node & Document {
  title: String!
  description: String!
  link: String
  soon: Boolean
  image: String!
  tags: [String]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ProductFilter {
  title: StringFilter
  description: StringFilter
  link: StringFilter
  soon: BooleanFilter
  image: ImageFilter
  tags: StringFilter
}

type ProductConnectionEdges {
  cursor: String!
  node: Product
}

type ProductConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ProductConnectionEdges]
}

type Tags implements Node & Document {
  title: String!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input TagsFilter {
  title: StringFilter
}

type TagsConnectionEdges {
  cursor: String!
  node: Tags
}

type TagsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [TagsConnectionEdges]
}

type WikiSeo {
  title: String
  description: String
  canonical: String
  seoImg: String
  partialSeoImage: String
  cardType: String
}

type Wiki implements Node & Document {
  seo: WikiSeo
  title: String!
  tags: [String]
  excerpt: JSON
  date: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input WikiSeoFilter {
  title: StringFilter
  description: StringFilter
  canonical: StringFilter
  seoImg: ImageFilter
  partialSeoImage: ImageFilter
  cardType: StringFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input WikiBodyImageFilter {
  src: ImageFilter
  alt: StringFilter
  compact: BooleanFilter
}

input WikiBodyButtonFilter {
  href: StringFilter
  text: StringFilter
  variant: StringFilter
}

input WikiBodyContactFormFilter {
  heading: StringFilter
}

input WikiBodyFilter {
  image: WikiBodyImageFilter
  Button: WikiBodyButtonFilter
  ContactForm: WikiBodyContactFormFilter
}

input WikiFilter {
  seo: WikiSeoFilter
  title: StringFilter
  tags: StringFilter
  excerpt: RichTextFilter
  date: DatetimeFilter
  body: WikiBodyFilter
}

type WikiConnectionEdges {
  cursor: String!
  node: Wiki
}

type WikiConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [WikiConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateBlog(relativePath: String!, params: BlogMutation!): Blog!
  createBlog(relativePath: String!, params: BlogMutation!): Blog!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateProduct(relativePath: String!, params: ProductMutation!): Product!
  createProduct(relativePath: String!, params: ProductMutation!): Product!
  updateTags(relativePath: String!, params: TagsMutation!): Tags!
  createTags(relativePath: String!, params: TagsMutation!): Tags!
  updateWiki(relativePath: String!, params: WikiMutation!): Wiki!
  createWiki(relativePath: String!, params: WikiMutation!): Wiki!
}

input DocumentUpdateMutation {
  blog: BlogMutation
  global: GlobalMutation
  page: PageMutation
  product: ProductMutation
  tags: TagsMutation
  wiki: WikiMutation
  relativePath: String
}

input DocumentMutation {
  blog: BlogMutation
  global: GlobalMutation
  page: PageMutation
  product: ProductMutation
  tags: TagsMutation
  wiki: WikiMutation
}

input BlogSeoMutation {
  title: String
  description: String
  canonical: String
  seoImg: String
  partialSeoImage: String
  cardType: String
}

input BlogMutation {
  seo: BlogSeoMutation
  title: String
  tags: [String]
  category: String
  heroImg: String
  excerpt: String
  date: String
  body: JSON
}

input GlobalNavigationMainMutation {
  href: String
  label: String
  isButton: Boolean
}

input GlobalNavigationActionsMutation {
  href: String
  label: String
  isButton: Boolean
}

input GlobalNavigationMutation {
  main: [GlobalNavigationMainMutation]
  actions: [GlobalNavigationActionsMutation]
}

input GlobalSocialMutation {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

input GlobalPathsMutation {
  wiki: String
  blog: String
  contact: String
}

input GlobalCompanyInfoMutation {
  companyName: String
  vat: String
}

input GlobalMutation {
  navigation: GlobalNavigationMutation
  social: GlobalSocialMutation
  paths: GlobalPathsMutation
  companyInfo: GlobalCompanyInfoMutation
}

input PageSeoMutation {
  title: String
  description: String
  canonical: String
  seoImg: String
  partialSeoImage: String
  cardType: String
}

input PageBlocksBigTitleActionMutation {
  title: String
  label: String
  href: String
}

input PageBlocksBigTitleMutation {
  title: String
  action: PageBlocksBigTitleActionMutation
}

input PageBlocksBlogHeaderMutation {
  title: String
  subtitle: String
  link: String
  image: String
}

input PageBlocksBlogMutation {
  header: PageBlocksBlogHeaderMutation
  searchEnabled: Boolean
  featuredEnabled: Boolean
  tags: [String]
  count: Float
}

input PageBlocksContentMutation {
  body: JSON
}

input PageBlocksFeaturesItemsMutation {
  title: String
  description: String
  icon: String
}

input PageBlocksFeaturesMutation {
  title: String
  subTitle: String
  items: [PageBlocksFeaturesItemsMutation]
}

input PageBlocksHeroImageMutation {
  src: String
  alt: String
}

input PageBlocksHeroMutation {
  title: String
  text: JSON
  image: PageBlocksHeroImageMutation
}

input PageBlocksKeywordListMutation {
  title: String
  keywords: [String]
}

input PageBlocksWikiHeaderMutation {
  title: String
  subtitle: String
  link: String
  image: String
}

input PageBlocksWikiMutation {
  header: PageBlocksWikiHeaderMutation
  searchEnabled: Boolean
  tags: [String]
  count: Float
}

input PageBlocksProductsHeaderMutation {
  title: String
  subtitle: String
  link: String
}

input PageBlocksProductsMutation {
  header: PageBlocksProductsHeaderMutation
  tags: [String]
  count: Float
}

input PageBlocksMutation {
  bigTitle: PageBlocksBigTitleMutation
  Blog: PageBlocksBlogMutation
  content: PageBlocksContentMutation
  features: PageBlocksFeaturesMutation
  hero: PageBlocksHeroMutation
  KeywordList: PageBlocksKeywordListMutation
  Wiki: PageBlocksWikiMutation
  products: PageBlocksProductsMutation
}

input PageMutation {
  seo: PageSeoMutation
  title: String
  blocks: [PageBlocksMutation]
}

input ProductMutation {
  title: String
  description: String
  link: String
  soon: Boolean
  image: String
  tags: [String]
}

input TagsMutation {
  title: String
}

input WikiSeoMutation {
  title: String
  description: String
  canonical: String
  seoImg: String
  partialSeoImage: String
  cardType: String
}

input WikiMutation {
  seo: WikiSeoMutation
  title: String
  tags: [String]
  excerpt: JSON
  date: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
