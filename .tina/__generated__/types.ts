//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  blog: Blog;
  blogConnection: BlogConnection;
  global: Global;
  globalConnection: GlobalConnection;
  page: Page;
  pageConnection: PageConnection;
  product: Product;
  productConnection: ProductConnection;
  tags: Tags;
  tagsConnection: TagsConnection;
  wiki: Wiki;
  wikiConnection: WikiConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryBlogArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryBlogConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<BlogFilter>;
};


export type QueryGlobalArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGlobalConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<GlobalFilter>;
};


export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PageFilter>;
};


export type QueryProductArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryProductConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ProductFilter>;
};


export type QueryTagsArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryTagsConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<TagsFilter>;
};


export type QueryWikiArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryWikiConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<WikiFilter>;
};

export type DocumentFilter = {
  blog?: InputMaybe<BlogFilter>;
  global?: InputMaybe<GlobalFilter>;
  page?: InputMaybe<PageFilter>;
  product?: InputMaybe<ProductFilter>;
  tags?: InputMaybe<TagsFilter>;
  wiki?: InputMaybe<WikiFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentFilter>;
};

export type DocumentNode = Blog | Global | Page | Product | Tags | Wiki;

export type BlogSeo = {
  __typename?: 'BlogSeo';
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  canonical?: Maybe<Scalars['String']>;
  seoImg?: Maybe<Scalars['String']>;
  partialSeoImage?: Maybe<Scalars['String']>;
  cardType?: Maybe<Scalars['String']>;
};

export type Blog = Node & Document & {
  __typename?: 'Blog';
  seo?: Maybe<BlogSeo>;
  title: Scalars['String'];
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  category: Scalars['String'];
  heroImg?: Maybe<Scalars['String']>;
  excerpt?: Maybe<Scalars['String']>;
  date: Scalars['String'];
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type BlogSeoFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  canonical?: InputMaybe<StringFilter>;
  seoImg?: InputMaybe<ImageFilter>;
  partialSeoImage?: InputMaybe<ImageFilter>;
  cardType?: InputMaybe<StringFilter>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type BlogBodyImageFilter = {
  src?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
  compact?: InputMaybe<BooleanFilter>;
};

export type BlogBodyButtonFilter = {
  href?: InputMaybe<StringFilter>;
  text?: InputMaybe<StringFilter>;
  variant?: InputMaybe<StringFilter>;
};

export type BlogBodyContactFormFilter = {
  heading?: InputMaybe<StringFilter>;
};

export type BlogBodyFilter = {
  image?: InputMaybe<BlogBodyImageFilter>;
  Button?: InputMaybe<BlogBodyButtonFilter>;
  ContactForm?: InputMaybe<BlogBodyContactFormFilter>;
};

export type BlogFilter = {
  seo?: InputMaybe<BlogSeoFilter>;
  title?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  category?: InputMaybe<StringFilter>;
  heroImg?: InputMaybe<ImageFilter>;
  excerpt?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  body?: InputMaybe<BlogBodyFilter>;
};

export type BlogConnectionEdges = {
  __typename?: 'BlogConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Blog>;
};

export type BlogConnection = Connection & {
  __typename?: 'BlogConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<BlogConnectionEdges>>>;
};

export type GlobalNavigationMain = {
  __typename?: 'GlobalNavigationMain';
  href: Scalars['String'];
  label: Scalars['String'];
  isButton?: Maybe<Scalars['Boolean']>;
};

export type GlobalNavigationActions = {
  __typename?: 'GlobalNavigationActions';
  href: Scalars['String'];
  label: Scalars['String'];
  isButton?: Maybe<Scalars['Boolean']>;
};

export type GlobalNavigation = {
  __typename?: 'GlobalNavigation';
  main?: Maybe<Array<Maybe<GlobalNavigationMain>>>;
  actions?: Maybe<Array<Maybe<GlobalNavigationActions>>>;
};

export type GlobalSocial = {
  __typename?: 'GlobalSocial';
  facebook?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  instagram?: Maybe<Scalars['String']>;
  github?: Maybe<Scalars['String']>;
};

export type GlobalPaths = {
  __typename?: 'GlobalPaths';
  wiki?: Maybe<Scalars['String']>;
  blog?: Maybe<Scalars['String']>;
  contact?: Maybe<Scalars['String']>;
};

export type GlobalCompanyInfo = {
  __typename?: 'GlobalCompanyInfo';
  companyName?: Maybe<Scalars['String']>;
  vat?: Maybe<Scalars['String']>;
};

export type Global = Node & Document & {
  __typename?: 'Global';
  navigation?: Maybe<GlobalNavigation>;
  social?: Maybe<GlobalSocial>;
  paths?: Maybe<GlobalPaths>;
  companyInfo?: Maybe<GlobalCompanyInfo>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type GlobalNavigationMainFilter = {
  href?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
  isButton?: InputMaybe<BooleanFilter>;
};

export type GlobalNavigationActionsFilter = {
  href?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
  isButton?: InputMaybe<BooleanFilter>;
};

export type GlobalNavigationFilter = {
  main?: InputMaybe<GlobalNavigationMainFilter>;
  actions?: InputMaybe<GlobalNavigationActionsFilter>;
};

export type GlobalSocialFilter = {
  facebook?: InputMaybe<StringFilter>;
  twitter?: InputMaybe<StringFilter>;
  instagram?: InputMaybe<StringFilter>;
  github?: InputMaybe<StringFilter>;
};

export type GlobalPathsFilter = {
  wiki?: InputMaybe<StringFilter>;
  blog?: InputMaybe<StringFilter>;
  contact?: InputMaybe<StringFilter>;
};

export type GlobalCompanyInfoFilter = {
  companyName?: InputMaybe<StringFilter>;
  vat?: InputMaybe<StringFilter>;
};

export type GlobalFilter = {
  navigation?: InputMaybe<GlobalNavigationFilter>;
  social?: InputMaybe<GlobalSocialFilter>;
  paths?: InputMaybe<GlobalPathsFilter>;
  companyInfo?: InputMaybe<GlobalCompanyInfoFilter>;
};

export type GlobalConnectionEdges = {
  __typename?: 'GlobalConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Global>;
};

export type GlobalConnection = Connection & {
  __typename?: 'GlobalConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<GlobalConnectionEdges>>>;
};

export type PageSeo = {
  __typename?: 'PageSeo';
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  canonical?: Maybe<Scalars['String']>;
  seoImg?: Maybe<Scalars['String']>;
  partialSeoImage?: Maybe<Scalars['String']>;
  cardType?: Maybe<Scalars['String']>;
};

export type PageBlocksBigTitleAction = {
  __typename?: 'PageBlocksBigTitleAction';
  title?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  href?: Maybe<Scalars['String']>;
};

export type PageBlocksBigTitle = {
  __typename?: 'PageBlocksBigTitle';
  title?: Maybe<Scalars['String']>;
  action?: Maybe<PageBlocksBigTitleAction>;
};

export type PageBlocksBlogHeader = {
  __typename?: 'PageBlocksBlogHeader';
  title?: Maybe<Scalars['String']>;
  subtitle?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
};

export type PageBlocksBlog = {
  __typename?: 'PageBlocksBlog';
  header?: Maybe<PageBlocksBlogHeader>;
  searchEnabled?: Maybe<Scalars['Boolean']>;
  featuredEnabled?: Maybe<Scalars['Boolean']>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  count?: Maybe<Scalars['Float']>;
};

export type PageBlocksContent = {
  __typename?: 'PageBlocksContent';
  body?: Maybe<Scalars['JSON']>;
};

export type PageBlocksFeaturesItems = {
  __typename?: 'PageBlocksFeaturesItems';
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  icon?: Maybe<Scalars['String']>;
};

export type PageBlocksFeatures = {
  __typename?: 'PageBlocksFeatures';
  title?: Maybe<Scalars['String']>;
  subTitle?: Maybe<Scalars['String']>;
  items?: Maybe<Array<Maybe<PageBlocksFeaturesItems>>>;
};

export type PageBlocksHeroImage = {
  __typename?: 'PageBlocksHeroImage';
  src?: Maybe<Scalars['String']>;
  alt?: Maybe<Scalars['String']>;
};

export type PageBlocksHero = {
  __typename?: 'PageBlocksHero';
  title?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['JSON']>;
  image?: Maybe<PageBlocksHeroImage>;
};

export type PageBlocksKeywordList = {
  __typename?: 'PageBlocksKeywordList';
  title?: Maybe<Scalars['String']>;
  keywords?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PageBlocksWikiHeader = {
  __typename?: 'PageBlocksWikiHeader';
  title?: Maybe<Scalars['String']>;
  subtitle?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
};

export type PageBlocksWiki = {
  __typename?: 'PageBlocksWiki';
  header?: Maybe<PageBlocksWikiHeader>;
  searchEnabled?: Maybe<Scalars['Boolean']>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  count?: Maybe<Scalars['Float']>;
};

export type PageBlocksProductsHeader = {
  __typename?: 'PageBlocksProductsHeader';
  title?: Maybe<Scalars['String']>;
  subtitle?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
};

export type PageBlocksProducts = {
  __typename?: 'PageBlocksProducts';
  header?: Maybe<PageBlocksProductsHeader>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  count?: Maybe<Scalars['Float']>;
};

export type PageBlocks = PageBlocksBigTitle | PageBlocksBlog | PageBlocksContent | PageBlocksFeatures | PageBlocksHero | PageBlocksKeywordList | PageBlocksWiki | PageBlocksProducts;

export type Page = Node & Document & {
  __typename?: 'Page';
  seo?: Maybe<PageSeo>;
  title: Scalars['String'];
  blocks?: Maybe<Array<Maybe<PageBlocks>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type PageSeoFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  canonical?: InputMaybe<StringFilter>;
  seoImg?: InputMaybe<ImageFilter>;
  partialSeoImage?: InputMaybe<ImageFilter>;
  cardType?: InputMaybe<StringFilter>;
};

export type PageBlocksBigTitleActionFilter = {
  title?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
  href?: InputMaybe<StringFilter>;
};

export type PageBlocksBigTitleFilter = {
  title?: InputMaybe<StringFilter>;
  action?: InputMaybe<PageBlocksBigTitleActionFilter>;
};

export type PageBlocksBlogHeaderFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']>;
  lte?: InputMaybe<Scalars['Float']>;
  gte?: InputMaybe<Scalars['Float']>;
  gt?: InputMaybe<Scalars['Float']>;
  eq?: InputMaybe<Scalars['Float']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
};

export type PageBlocksBlogFilter = {
  header?: InputMaybe<PageBlocksBlogHeaderFilter>;
  searchEnabled?: InputMaybe<BooleanFilter>;
  featuredEnabled?: InputMaybe<BooleanFilter>;
  tags?: InputMaybe<StringFilter>;
  count?: InputMaybe<NumberFilter>;
};

export type PageBlocksContentBodyImageFilter = {
  src?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
  compact?: InputMaybe<BooleanFilter>;
};

export type PageBlocksContentBodyButtonFilter = {
  href?: InputMaybe<StringFilter>;
  text?: InputMaybe<StringFilter>;
  variant?: InputMaybe<StringFilter>;
};

export type PageBlocksContentBodyContactFormFilter = {
  heading?: InputMaybe<StringFilter>;
};

export type PageBlocksContentBodyFilter = {
  image?: InputMaybe<PageBlocksContentBodyImageFilter>;
  Button?: InputMaybe<PageBlocksContentBodyButtonFilter>;
  ContactForm?: InputMaybe<PageBlocksContentBodyContactFormFilter>;
};

export type PageBlocksContentFilter = {
  body?: InputMaybe<PageBlocksContentBodyFilter>;
};

export type PageBlocksFeaturesItemsFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type PageBlocksFeaturesFilter = {
  title?: InputMaybe<StringFilter>;
  subTitle?: InputMaybe<StringFilter>;
  items?: InputMaybe<PageBlocksFeaturesItemsFilter>;
};

export type PageBlocksHeroTextImageFilter = {
  src?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
  compact?: InputMaybe<BooleanFilter>;
};

export type PageBlocksHeroTextButtonFilter = {
  href?: InputMaybe<StringFilter>;
  text?: InputMaybe<StringFilter>;
  variant?: InputMaybe<StringFilter>;
};

export type PageBlocksHeroTextContactFormFilter = {
  heading?: InputMaybe<StringFilter>;
};

export type PageBlocksHeroTextFilter = {
  image?: InputMaybe<PageBlocksHeroTextImageFilter>;
  Button?: InputMaybe<PageBlocksHeroTextButtonFilter>;
  ContactForm?: InputMaybe<PageBlocksHeroTextContactFormFilter>;
};

export type PageBlocksHeroImageFilter = {
  src?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
};

export type PageBlocksHeroFilter = {
  title?: InputMaybe<StringFilter>;
  text?: InputMaybe<PageBlocksHeroTextFilter>;
  image?: InputMaybe<PageBlocksHeroImageFilter>;
};

export type PageBlocksKeywordListFilter = {
  title?: InputMaybe<StringFilter>;
  keywords?: InputMaybe<StringFilter>;
};

export type PageBlocksWikiHeaderFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type PageBlocksWikiFilter = {
  header?: InputMaybe<PageBlocksWikiHeaderFilter>;
  searchEnabled?: InputMaybe<BooleanFilter>;
  tags?: InputMaybe<StringFilter>;
  count?: InputMaybe<NumberFilter>;
};

export type PageBlocksProductsHeaderFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
};

export type PageBlocksProductsFilter = {
  header?: InputMaybe<PageBlocksProductsHeaderFilter>;
  tags?: InputMaybe<StringFilter>;
  count?: InputMaybe<NumberFilter>;
};

export type PageBlocksFilter = {
  bigTitle?: InputMaybe<PageBlocksBigTitleFilter>;
  Blog?: InputMaybe<PageBlocksBlogFilter>;
  content?: InputMaybe<PageBlocksContentFilter>;
  features?: InputMaybe<PageBlocksFeaturesFilter>;
  hero?: InputMaybe<PageBlocksHeroFilter>;
  KeywordList?: InputMaybe<PageBlocksKeywordListFilter>;
  Wiki?: InputMaybe<PageBlocksWikiFilter>;
  products?: InputMaybe<PageBlocksProductsFilter>;
};

export type PageFilter = {
  seo?: InputMaybe<PageSeoFilter>;
  title?: InputMaybe<StringFilter>;
  blocks?: InputMaybe<PageBlocksFilter>;
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type Product = Node & Document & {
  __typename?: 'Product';
  title: Scalars['String'];
  description: Scalars['String'];
  link?: Maybe<Scalars['String']>;
  soon?: Maybe<Scalars['Boolean']>;
  image: Scalars['String'];
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type ProductFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
  soon?: InputMaybe<BooleanFilter>;
  image?: InputMaybe<ImageFilter>;
  tags?: InputMaybe<StringFilter>;
};

export type ProductConnectionEdges = {
  __typename?: 'ProductConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Product>;
};

export type ProductConnection = Connection & {
  __typename?: 'ProductConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ProductConnectionEdges>>>;
};

export type Tags = Node & Document & {
  __typename?: 'Tags';
  title: Scalars['String'];
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type TagsFilter = {
  title?: InputMaybe<StringFilter>;
};

export type TagsConnectionEdges = {
  __typename?: 'TagsConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Tags>;
};

export type TagsConnection = Connection & {
  __typename?: 'TagsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<TagsConnectionEdges>>>;
};

export type WikiSeo = {
  __typename?: 'WikiSeo';
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  canonical?: Maybe<Scalars['String']>;
  seoImg?: Maybe<Scalars['String']>;
  partialSeoImage?: Maybe<Scalars['String']>;
  cardType?: Maybe<Scalars['String']>;
};

export type Wiki = Node & Document & {
  __typename?: 'Wiki';
  seo?: Maybe<WikiSeo>;
  title: Scalars['String'];
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  excerpt?: Maybe<Scalars['JSON']>;
  date: Scalars['String'];
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type WikiSeoFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  canonical?: InputMaybe<StringFilter>;
  seoImg?: InputMaybe<ImageFilter>;
  partialSeoImage?: InputMaybe<ImageFilter>;
  cardType?: InputMaybe<StringFilter>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type WikiBodyImageFilter = {
  src?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
  compact?: InputMaybe<BooleanFilter>;
};

export type WikiBodyButtonFilter = {
  href?: InputMaybe<StringFilter>;
  text?: InputMaybe<StringFilter>;
  variant?: InputMaybe<StringFilter>;
};

export type WikiBodyContactFormFilter = {
  heading?: InputMaybe<StringFilter>;
};

export type WikiBodyFilter = {
  image?: InputMaybe<WikiBodyImageFilter>;
  Button?: InputMaybe<WikiBodyButtonFilter>;
  ContactForm?: InputMaybe<WikiBodyContactFormFilter>;
};

export type WikiFilter = {
  seo?: InputMaybe<WikiSeoFilter>;
  title?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  excerpt?: InputMaybe<RichTextFilter>;
  date?: InputMaybe<DatetimeFilter>;
  body?: InputMaybe<WikiBodyFilter>;
};

export type WikiConnectionEdges = {
  __typename?: 'WikiConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Wiki>;
};

export type WikiConnection = Connection & {
  __typename?: 'WikiConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<WikiConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateBlog: Blog;
  createBlog: Blog;
  updateGlobal: Global;
  createGlobal: Global;
  updatePage: Page;
  createPage: Page;
  updateProduct: Product;
  createProduct: Product;
  updateTags: Tags;
  createTags: Tags;
  updateWiki: Wiki;
  createWiki: Wiki;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateBlogArgs = {
  relativePath: Scalars['String'];
  params: BlogMutation;
};


export type MutationCreateBlogArgs = {
  relativePath: Scalars['String'];
  params: BlogMutation;
};


export type MutationUpdateGlobalArgs = {
  relativePath: Scalars['String'];
  params: GlobalMutation;
};


export type MutationCreateGlobalArgs = {
  relativePath: Scalars['String'];
  params: GlobalMutation;
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String'];
  params: PageMutation;
};


export type MutationUpdateProductArgs = {
  relativePath: Scalars['String'];
  params: ProductMutation;
};


export type MutationCreateProductArgs = {
  relativePath: Scalars['String'];
  params: ProductMutation;
};


export type MutationUpdateTagsArgs = {
  relativePath: Scalars['String'];
  params: TagsMutation;
};


export type MutationCreateTagsArgs = {
  relativePath: Scalars['String'];
  params: TagsMutation;
};


export type MutationUpdateWikiArgs = {
  relativePath: Scalars['String'];
  params: WikiMutation;
};


export type MutationCreateWikiArgs = {
  relativePath: Scalars['String'];
  params: WikiMutation;
};

export type DocumentUpdateMutation = {
  blog?: InputMaybe<BlogMutation>;
  global?: InputMaybe<GlobalMutation>;
  page?: InputMaybe<PageMutation>;
  product?: InputMaybe<ProductMutation>;
  tags?: InputMaybe<TagsMutation>;
  wiki?: InputMaybe<WikiMutation>;
  relativePath?: InputMaybe<Scalars['String']>;
};

export type DocumentMutation = {
  blog?: InputMaybe<BlogMutation>;
  global?: InputMaybe<GlobalMutation>;
  page?: InputMaybe<PageMutation>;
  product?: InputMaybe<ProductMutation>;
  tags?: InputMaybe<TagsMutation>;
  wiki?: InputMaybe<WikiMutation>;
};

export type BlogSeoMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  canonical?: InputMaybe<Scalars['String']>;
  seoImg?: InputMaybe<Scalars['String']>;
  partialSeoImage?: InputMaybe<Scalars['String']>;
  cardType?: InputMaybe<Scalars['String']>;
};

export type BlogMutation = {
  seo?: InputMaybe<BlogSeoMutation>;
  title?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  category?: InputMaybe<Scalars['String']>;
  heroImg?: InputMaybe<Scalars['String']>;
  excerpt?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type GlobalNavigationMainMutation = {
  href?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  isButton?: InputMaybe<Scalars['Boolean']>;
};

export type GlobalNavigationActionsMutation = {
  href?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  isButton?: InputMaybe<Scalars['Boolean']>;
};

export type GlobalNavigationMutation = {
  main?: InputMaybe<Array<InputMaybe<GlobalNavigationMainMutation>>>;
  actions?: InputMaybe<Array<InputMaybe<GlobalNavigationActionsMutation>>>;
};

export type GlobalSocialMutation = {
  facebook?: InputMaybe<Scalars['String']>;
  twitter?: InputMaybe<Scalars['String']>;
  instagram?: InputMaybe<Scalars['String']>;
  github?: InputMaybe<Scalars['String']>;
};

export type GlobalPathsMutation = {
  wiki?: InputMaybe<Scalars['String']>;
  blog?: InputMaybe<Scalars['String']>;
  contact?: InputMaybe<Scalars['String']>;
};

export type GlobalCompanyInfoMutation = {
  companyName?: InputMaybe<Scalars['String']>;
  vat?: InputMaybe<Scalars['String']>;
};

export type GlobalMutation = {
  navigation?: InputMaybe<GlobalNavigationMutation>;
  social?: InputMaybe<GlobalSocialMutation>;
  paths?: InputMaybe<GlobalPathsMutation>;
  companyInfo?: InputMaybe<GlobalCompanyInfoMutation>;
};

export type PageSeoMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  canonical?: InputMaybe<Scalars['String']>;
  seoImg?: InputMaybe<Scalars['String']>;
  partialSeoImage?: InputMaybe<Scalars['String']>;
  cardType?: InputMaybe<Scalars['String']>;
};

export type PageBlocksBigTitleActionMutation = {
  title?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  href?: InputMaybe<Scalars['String']>;
};

export type PageBlocksBigTitleMutation = {
  title?: InputMaybe<Scalars['String']>;
  action?: InputMaybe<PageBlocksBigTitleActionMutation>;
};

export type PageBlocksBlogHeaderMutation = {
  title?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  link?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
};

export type PageBlocksBlogMutation = {
  header?: InputMaybe<PageBlocksBlogHeaderMutation>;
  searchEnabled?: InputMaybe<Scalars['Boolean']>;
  featuredEnabled?: InputMaybe<Scalars['Boolean']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  count?: InputMaybe<Scalars['Float']>;
};

export type PageBlocksContentMutation = {
  body?: InputMaybe<Scalars['JSON']>;
};

export type PageBlocksFeaturesItemsMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  icon?: InputMaybe<Scalars['String']>;
};

export type PageBlocksFeaturesMutation = {
  title?: InputMaybe<Scalars['String']>;
  subTitle?: InputMaybe<Scalars['String']>;
  items?: InputMaybe<Array<InputMaybe<PageBlocksFeaturesItemsMutation>>>;
};

export type PageBlocksHeroImageMutation = {
  src?: InputMaybe<Scalars['String']>;
  alt?: InputMaybe<Scalars['String']>;
};

export type PageBlocksHeroMutation = {
  title?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['JSON']>;
  image?: InputMaybe<PageBlocksHeroImageMutation>;
};

export type PageBlocksKeywordListMutation = {
  title?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type PageBlocksWikiHeaderMutation = {
  title?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  link?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
};

export type PageBlocksWikiMutation = {
  header?: InputMaybe<PageBlocksWikiHeaderMutation>;
  searchEnabled?: InputMaybe<Scalars['Boolean']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  count?: InputMaybe<Scalars['Float']>;
};

export type PageBlocksProductsHeaderMutation = {
  title?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  link?: InputMaybe<Scalars['String']>;
};

export type PageBlocksProductsMutation = {
  header?: InputMaybe<PageBlocksProductsHeaderMutation>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  count?: InputMaybe<Scalars['Float']>;
};

export type PageBlocksMutation = {
  bigTitle?: InputMaybe<PageBlocksBigTitleMutation>;
  Blog?: InputMaybe<PageBlocksBlogMutation>;
  content?: InputMaybe<PageBlocksContentMutation>;
  features?: InputMaybe<PageBlocksFeaturesMutation>;
  hero?: InputMaybe<PageBlocksHeroMutation>;
  KeywordList?: InputMaybe<PageBlocksKeywordListMutation>;
  Wiki?: InputMaybe<PageBlocksWikiMutation>;
  products?: InputMaybe<PageBlocksProductsMutation>;
};

export type PageMutation = {
  seo?: InputMaybe<PageSeoMutation>;
  title?: InputMaybe<Scalars['String']>;
  blocks?: InputMaybe<Array<InputMaybe<PageBlocksMutation>>>;
};

export type ProductMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  link?: InputMaybe<Scalars['String']>;
  soon?: InputMaybe<Scalars['Boolean']>;
  image?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type TagsMutation = {
  title?: InputMaybe<Scalars['String']>;
};

export type WikiSeoMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  canonical?: InputMaybe<Scalars['String']>;
  seoImg?: InputMaybe<Scalars['String']>;
  partialSeoImage?: InputMaybe<Scalars['String']>;
  cardType?: InputMaybe<Scalars['String']>;
};

export type WikiMutation = {
  seo?: InputMaybe<WikiSeoMutation>;
  title?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  excerpt?: InputMaybe<Scalars['JSON']>;
  date?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type LayoutQueryFragmentFragment = { __typename?: 'Query', global: { __typename?: 'Global', navigation?: { __typename: 'GlobalNavigation', main?: Array<{ __typename: 'GlobalNavigationMain', href: string, label: string, isButton?: boolean | null } | null> | null, actions?: Array<{ __typename: 'GlobalNavigationActions', href: string, label: string, isButton?: boolean | null } | null> | null } | null, social?: { __typename: 'GlobalSocial', facebook?: string | null, twitter?: string | null, instagram?: string | null, github?: string | null } | null, paths?: { __typename: 'GlobalPaths', wiki?: string | null, blog?: string | null, contact?: string | null } | null, companyInfo?: { __typename: 'GlobalCompanyInfo', companyName?: string | null, vat?: string | null } | null } };

export type ContentQueryQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type ContentQueryQuery = { __typename?: 'Query', page: { __typename?: 'Page', title: string, seo?: { __typename: 'PageSeo', title?: string | null, description?: string | null, canonical?: string | null, seoImg?: string | null, partialSeoImage?: string | null, cardType?: string | null } | null, blocks?: Array<{ __typename: 'PageBlocksBigTitle', title?: string | null, action?: { __typename: 'PageBlocksBigTitleAction', title?: string | null, label?: string | null, href?: string | null } | null } | { __typename: 'PageBlocksBlog', searchEnabled?: boolean | null, featuredEnabled?: boolean | null, tags?: Array<string | null> | null, count?: number | null, header?: { __typename: 'PageBlocksBlogHeader', title?: string | null, subtitle?: string | null, link?: string | null, image?: string | null } | null } | { __typename: 'PageBlocksContent', body?: any | null } | { __typename: 'PageBlocksFeatures', title?: string | null, subTitle?: string | null, items?: Array<{ __typename: 'PageBlocksFeaturesItems', title?: string | null, description?: string | null, icon?: string | null } | null> | null } | { __typename: 'PageBlocksHero', title?: string | null, text?: any | null, image?: { __typename: 'PageBlocksHeroImage', src?: string | null, alt?: string | null } | null } | { __typename: 'PageBlocksKeywordList', title?: string | null, keywords?: Array<string | null> | null } | { __typename: 'PageBlocksWiki', searchEnabled?: boolean | null, tags?: Array<string | null> | null, count?: number | null, header?: { __typename: 'PageBlocksWikiHeader', title?: string | null, subtitle?: string | null, link?: string | null, image?: string | null } | null } | { __typename: 'PageBlocksProducts', tags?: Array<string | null> | null, count?: number | null, header?: { __typename: 'PageBlocksProductsHeader', title?: string | null, subtitle?: string | null, link?: string | null } | null } | null> | null }, blogConnection: { __typename?: 'BlogConnection', edges?: Array<{ __typename?: 'BlogConnectionEdges', node?: { __typename?: 'Blog', id: string, title: string, tags?: Array<string | null> | null, category: string, heroImg?: string | null, excerpt?: string | null, date: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, seo?: { __typename: 'BlogSeo', title?: string | null, description?: string | null, canonical?: string | null, seoImg?: string | null, partialSeoImage?: string | null, cardType?: string | null } | null } | null } | null> | null }, wikiConnection: { __typename?: 'WikiConnection', edges?: Array<{ __typename?: 'WikiConnectionEdges', node?: { __typename?: 'Wiki', id: string, title: string, tags?: Array<string | null> | null, excerpt?: any | null, date: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, seo?: { __typename: 'WikiSeo', title?: string | null, description?: string | null, canonical?: string | null, seoImg?: string | null, partialSeoImage?: string | null, cardType?: string | null } | null } | null } | null> | null }, productConnection: { __typename?: 'ProductConnection', edges?: Array<{ __typename?: 'ProductConnectionEdges', node?: { __typename?: 'Product', id: string, title: string, description: string, link?: string | null, soon?: boolean | null, image: string, tags?: Array<string | null> | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null }, global: { __typename?: 'Global', navigation?: { __typename: 'GlobalNavigation', main?: Array<{ __typename: 'GlobalNavigationMain', href: string, label: string, isButton?: boolean | null } | null> | null, actions?: Array<{ __typename: 'GlobalNavigationActions', href: string, label: string, isButton?: boolean | null } | null> | null } | null, social?: { __typename: 'GlobalSocial', facebook?: string | null, twitter?: string | null, instagram?: string | null, github?: string | null } | null, paths?: { __typename: 'GlobalPaths', wiki?: string | null, blog?: string | null, contact?: string | null } | null, companyInfo?: { __typename: 'GlobalCompanyInfo', companyName?: string | null, vat?: string | null } | null } };

export type BlogPostQueryQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type BlogPostQueryQuery = { __typename?: 'Query', blog: { __typename?: 'Blog', title: string, tags?: Array<string | null> | null, category: string, heroImg?: string | null, excerpt?: string | null, date: string, body?: any | null, seo?: { __typename: 'BlogSeo', title?: string | null, description?: string | null, canonical?: string | null, seoImg?: string | null, partialSeoImage?: string | null, cardType?: string | null } | null }, blogConnection: { __typename?: 'BlogConnection', edges?: Array<{ __typename?: 'BlogConnectionEdges', node?: { __typename?: 'Blog', id: string, title: string, tags?: Array<string | null> | null, category: string, heroImg?: string | null, excerpt?: string | null, date: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, seo?: { __typename: 'BlogSeo', title?: string | null, description?: string | null, canonical?: string | null, seoImg?: string | null, partialSeoImage?: string | null, cardType?: string | null } | null } | null } | null> | null }, global: { __typename?: 'Global', navigation?: { __typename: 'GlobalNavigation', main?: Array<{ __typename: 'GlobalNavigationMain', href: string, label: string, isButton?: boolean | null } | null> | null, actions?: Array<{ __typename: 'GlobalNavigationActions', href: string, label: string, isButton?: boolean | null } | null> | null } | null, social?: { __typename: 'GlobalSocial', facebook?: string | null, twitter?: string | null, instagram?: string | null, github?: string | null } | null, paths?: { __typename: 'GlobalPaths', wiki?: string | null, blog?: string | null, contact?: string | null } | null, companyInfo?: { __typename: 'GlobalCompanyInfo', companyName?: string | null, vat?: string | null } | null } };

export type WikiQueryQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type WikiQueryQuery = { __typename?: 'Query', wiki: { __typename?: 'Wiki', title: string, tags?: Array<string | null> | null, excerpt?: any | null, date: string, body?: any | null, seo?: { __typename: 'WikiSeo', title?: string | null, description?: string | null, canonical?: string | null, seoImg?: string | null, partialSeoImage?: string | null, cardType?: string | null } | null }, global: { __typename?: 'Global', navigation?: { __typename: 'GlobalNavigation', main?: Array<{ __typename: 'GlobalNavigationMain', href: string, label: string, isButton?: boolean | null } | null> | null, actions?: Array<{ __typename: 'GlobalNavigationActions', href: string, label: string, isButton?: boolean | null } | null> | null } | null, social?: { __typename: 'GlobalSocial', facebook?: string | null, twitter?: string | null, instagram?: string | null, github?: string | null } | null, paths?: { __typename: 'GlobalPaths', wiki?: string | null, blog?: string | null, contact?: string | null } | null, companyInfo?: { __typename: 'GlobalCompanyInfo', companyName?: string | null, vat?: string | null } | null } };

export type SitemapQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type SitemapQueryQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', edges?: Array<{ __typename?: 'PageConnectionEdges', node?: { __typename?: 'Page', title: string, id: string, _sys: { __typename?: 'SystemInfo', filename: string } } | null } | null> | null }, blogConnection: { __typename?: 'BlogConnection', edges?: Array<{ __typename?: 'BlogConnectionEdges', node?: { __typename?: 'Blog', title: string, id: string, date: string, _sys: { __typename?: 'SystemInfo', filename: string } } | null } | null> | null }, wikiConnection: { __typename?: 'WikiConnection', edges?: Array<{ __typename?: 'WikiConnectionEdges', node?: { __typename?: 'Wiki', title: string, id: string, date: string, _sys: { __typename?: 'SystemInfo', filename: string } } | null } | null> | null }, global: { __typename?: 'Global', navigation?: { __typename: 'GlobalNavigation', main?: Array<{ __typename: 'GlobalNavigationMain', href: string, label: string, isButton?: boolean | null } | null> | null, actions?: Array<{ __typename: 'GlobalNavigationActions', href: string, label: string, isButton?: boolean | null } | null> | null } | null, social?: { __typename: 'GlobalSocial', facebook?: string | null, twitter?: string | null, instagram?: string | null, github?: string | null } | null, paths?: { __typename: 'GlobalPaths', wiki?: string | null, blog?: string | null, contact?: string | null } | null, companyInfo?: { __typename: 'GlobalCompanyInfo', companyName?: string | null, vat?: string | null } | null } };

export type BlogPartsFragment = { __typename?: 'Blog', title: string, tags?: Array<string | null> | null, category: string, heroImg?: string | null, excerpt?: string | null, date: string, body?: any | null, seo?: { __typename: 'BlogSeo', title?: string | null, description?: string | null, canonical?: string | null, seoImg?: string | null, partialSeoImage?: string | null, cardType?: string | null } | null };

export type GlobalPartsFragment = { __typename?: 'Global', navigation?: { __typename: 'GlobalNavigation', main?: Array<{ __typename: 'GlobalNavigationMain', href: string, label: string, isButton?: boolean | null } | null> | null, actions?: Array<{ __typename: 'GlobalNavigationActions', href: string, label: string, isButton?: boolean | null } | null> | null } | null, social?: { __typename: 'GlobalSocial', facebook?: string | null, twitter?: string | null, instagram?: string | null, github?: string | null } | null, paths?: { __typename: 'GlobalPaths', wiki?: string | null, blog?: string | null, contact?: string | null } | null, companyInfo?: { __typename: 'GlobalCompanyInfo', companyName?: string | null, vat?: string | null } | null };

export type PagePartsFragment = { __typename?: 'Page', title: string, seo?: { __typename: 'PageSeo', title?: string | null, description?: string | null, canonical?: string | null, seoImg?: string | null, partialSeoImage?: string | null, cardType?: string | null } | null, blocks?: Array<{ __typename: 'PageBlocksBigTitle', title?: string | null, action?: { __typename: 'PageBlocksBigTitleAction', title?: string | null, label?: string | null, href?: string | null } | null } | { __typename: 'PageBlocksBlog', searchEnabled?: boolean | null, featuredEnabled?: boolean | null, tags?: Array<string | null> | null, count?: number | null, header?: { __typename: 'PageBlocksBlogHeader', title?: string | null, subtitle?: string | null, link?: string | null, image?: string | null } | null } | { __typename: 'PageBlocksContent', body?: any | null } | { __typename: 'PageBlocksFeatures', title?: string | null, subTitle?: string | null, items?: Array<{ __typename: 'PageBlocksFeaturesItems', title?: string | null, description?: string | null, icon?: string | null } | null> | null } | { __typename: 'PageBlocksHero', title?: string | null, text?: any | null, image?: { __typename: 'PageBlocksHeroImage', src?: string | null, alt?: string | null } | null } | { __typename: 'PageBlocksKeywordList', title?: string | null, keywords?: Array<string | null> | null } | { __typename: 'PageBlocksWiki', searchEnabled?: boolean | null, tags?: Array<string | null> | null, count?: number | null, header?: { __typename: 'PageBlocksWikiHeader', title?: string | null, subtitle?: string | null, link?: string | null, image?: string | null } | null } | { __typename: 'PageBlocksProducts', tags?: Array<string | null> | null, count?: number | null, header?: { __typename: 'PageBlocksProductsHeader', title?: string | null, subtitle?: string | null, link?: string | null } | null } | null> | null };

export type ProductPartsFragment = { __typename?: 'Product', title: string, description: string, link?: string | null, soon?: boolean | null, image: string, tags?: Array<string | null> | null };

export type TagsPartsFragment = { __typename?: 'Tags', title: string };

export type WikiPartsFragment = { __typename?: 'Wiki', title: string, tags?: Array<string | null> | null, excerpt?: any | null, date: string, body?: any | null, seo?: { __typename: 'WikiSeo', title?: string | null, description?: string | null, canonical?: string | null, seoImg?: string | null, partialSeoImage?: string | null, cardType?: string | null } | null };

export type BlogQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type BlogQuery = { __typename?: 'Query', blog: { __typename?: 'Blog', id: string, title: string, tags?: Array<string | null> | null, category: string, heroImg?: string | null, excerpt?: string | null, date: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, seo?: { __typename: 'BlogSeo', title?: string | null, description?: string | null, canonical?: string | null, seoImg?: string | null, partialSeoImage?: string | null, cardType?: string | null } | null } };

export type BlogConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<BlogFilter>;
}>;


export type BlogConnectionQuery = { __typename?: 'Query', blogConnection: { __typename?: 'BlogConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'BlogConnectionEdges', cursor: string, node?: { __typename?: 'Blog', id: string, title: string, tags?: Array<string | null> | null, category: string, heroImg?: string | null, excerpt?: string | null, date: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, seo?: { __typename: 'BlogSeo', title?: string | null, description?: string | null, canonical?: string | null, seoImg?: string | null, partialSeoImage?: string | null, cardType?: string | null } | null } | null } | null> | null } };

export type GlobalQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GlobalQuery = { __typename?: 'Query', global: { __typename?: 'Global', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, navigation?: { __typename: 'GlobalNavigation', main?: Array<{ __typename: 'GlobalNavigationMain', href: string, label: string, isButton?: boolean | null } | null> | null, actions?: Array<{ __typename: 'GlobalNavigationActions', href: string, label: string, isButton?: boolean | null } | null> | null } | null, social?: { __typename: 'GlobalSocial', facebook?: string | null, twitter?: string | null, instagram?: string | null, github?: string | null } | null, paths?: { __typename: 'GlobalPaths', wiki?: string | null, blog?: string | null, contact?: string | null } | null, companyInfo?: { __typename: 'GlobalCompanyInfo', companyName?: string | null, vat?: string | null } | null } };

export type GlobalConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<GlobalFilter>;
}>;


export type GlobalConnectionQuery = { __typename?: 'Query', globalConnection: { __typename?: 'GlobalConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'GlobalConnectionEdges', cursor: string, node?: { __typename?: 'Global', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, navigation?: { __typename: 'GlobalNavigation', main?: Array<{ __typename: 'GlobalNavigationMain', href: string, label: string, isButton?: boolean | null } | null> | null, actions?: Array<{ __typename: 'GlobalNavigationActions', href: string, label: string, isButton?: boolean | null } | null> | null } | null, social?: { __typename: 'GlobalSocial', facebook?: string | null, twitter?: string | null, instagram?: string | null, github?: string | null } | null, paths?: { __typename: 'GlobalPaths', wiki?: string | null, blog?: string | null, contact?: string | null } | null, companyInfo?: { __typename: 'GlobalCompanyInfo', companyName?: string | null, vat?: string | null } | null } | null } | null> | null } };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename?: 'Page', id: string, title: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, seo?: { __typename: 'PageSeo', title?: string | null, description?: string | null, canonical?: string | null, seoImg?: string | null, partialSeoImage?: string | null, cardType?: string | null } | null, blocks?: Array<{ __typename: 'PageBlocksBigTitle', title?: string | null, action?: { __typename: 'PageBlocksBigTitleAction', title?: string | null, label?: string | null, href?: string | null } | null } | { __typename: 'PageBlocksBlog', searchEnabled?: boolean | null, featuredEnabled?: boolean | null, tags?: Array<string | null> | null, count?: number | null, header?: { __typename: 'PageBlocksBlogHeader', title?: string | null, subtitle?: string | null, link?: string | null, image?: string | null } | null } | { __typename: 'PageBlocksContent', body?: any | null } | { __typename: 'PageBlocksFeatures', title?: string | null, subTitle?: string | null, items?: Array<{ __typename: 'PageBlocksFeaturesItems', title?: string | null, description?: string | null, icon?: string | null } | null> | null } | { __typename: 'PageBlocksHero', title?: string | null, text?: any | null, image?: { __typename: 'PageBlocksHeroImage', src?: string | null, alt?: string | null } | null } | { __typename: 'PageBlocksKeywordList', title?: string | null, keywords?: Array<string | null> | null } | { __typename: 'PageBlocksWiki', searchEnabled?: boolean | null, tags?: Array<string | null> | null, count?: number | null, header?: { __typename: 'PageBlocksWikiHeader', title?: string | null, subtitle?: string | null, link?: string | null, image?: string | null } | null } | { __typename: 'PageBlocksProducts', tags?: Array<string | null> | null, count?: number | null, header?: { __typename: 'PageBlocksProductsHeader', title?: string | null, subtitle?: string | null, link?: string | null } | null } | null> | null } };

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PageFilter>;
}>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PageConnectionEdges', cursor: string, node?: { __typename?: 'Page', id: string, title: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, seo?: { __typename: 'PageSeo', title?: string | null, description?: string | null, canonical?: string | null, seoImg?: string | null, partialSeoImage?: string | null, cardType?: string | null } | null, blocks?: Array<{ __typename: 'PageBlocksBigTitle', title?: string | null, action?: { __typename: 'PageBlocksBigTitleAction', title?: string | null, label?: string | null, href?: string | null } | null } | { __typename: 'PageBlocksBlog', searchEnabled?: boolean | null, featuredEnabled?: boolean | null, tags?: Array<string | null> | null, count?: number | null, header?: { __typename: 'PageBlocksBlogHeader', title?: string | null, subtitle?: string | null, link?: string | null, image?: string | null } | null } | { __typename: 'PageBlocksContent', body?: any | null } | { __typename: 'PageBlocksFeatures', title?: string | null, subTitle?: string | null, items?: Array<{ __typename: 'PageBlocksFeaturesItems', title?: string | null, description?: string | null, icon?: string | null } | null> | null } | { __typename: 'PageBlocksHero', title?: string | null, text?: any | null, image?: { __typename: 'PageBlocksHeroImage', src?: string | null, alt?: string | null } | null } | { __typename: 'PageBlocksKeywordList', title?: string | null, keywords?: Array<string | null> | null } | { __typename: 'PageBlocksWiki', searchEnabled?: boolean | null, tags?: Array<string | null> | null, count?: number | null, header?: { __typename: 'PageBlocksWikiHeader', title?: string | null, subtitle?: string | null, link?: string | null, image?: string | null } | null } | { __typename: 'PageBlocksProducts', tags?: Array<string | null> | null, count?: number | null, header?: { __typename: 'PageBlocksProductsHeader', title?: string | null, subtitle?: string | null, link?: string | null } | null } | null> | null } | null } | null> | null } };

export type ProductQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type ProductQuery = { __typename?: 'Query', product: { __typename?: 'Product', id: string, title: string, description: string, link?: string | null, soon?: boolean | null, image: string, tags?: Array<string | null> | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type ProductConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ProductFilter>;
}>;


export type ProductConnectionQuery = { __typename?: 'Query', productConnection: { __typename?: 'ProductConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ProductConnectionEdges', cursor: string, node?: { __typename?: 'Product', id: string, title: string, description: string, link?: string | null, soon?: boolean | null, image: string, tags?: Array<string | null> | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type TagsQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type TagsQuery = { __typename?: 'Query', tags: { __typename?: 'Tags', id: string, title: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type TagsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<TagsFilter>;
}>;


export type TagsConnectionQuery = { __typename?: 'Query', tagsConnection: { __typename?: 'TagsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'TagsConnectionEdges', cursor: string, node?: { __typename?: 'Tags', id: string, title: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type WikiQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type WikiQuery = { __typename?: 'Query', wiki: { __typename?: 'Wiki', id: string, title: string, tags?: Array<string | null> | null, excerpt?: any | null, date: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, seo?: { __typename: 'WikiSeo', title?: string | null, description?: string | null, canonical?: string | null, seoImg?: string | null, partialSeoImage?: string | null, cardType?: string | null } | null } };

export type WikiConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<WikiFilter>;
}>;


export type WikiConnectionQuery = { __typename?: 'Query', wikiConnection: { __typename?: 'WikiConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'WikiConnectionEdges', cursor: string, node?: { __typename?: 'Wiki', id: string, title: string, tags?: Array<string | null> | null, excerpt?: any | null, date: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, seo?: { __typename: 'WikiSeo', title?: string | null, description?: string | null, canonical?: string | null, seoImg?: string | null, partialSeoImage?: string | null, cardType?: string | null } | null } | null } | null> | null } };

export const GlobalPartsFragmentDoc = gql`
    fragment GlobalParts on Global {
  navigation {
    __typename
    main {
      __typename
      href
      label
      isButton
    }
    actions {
      __typename
      href
      label
      isButton
    }
  }
  social {
    __typename
    facebook
    twitter
    instagram
    github
  }
  paths {
    __typename
    wiki
    blog
    contact
  }
  companyInfo {
    __typename
    companyName
    vat
  }
}
    `;
export const LayoutQueryFragmentFragmentDoc = gql`
    fragment LayoutQueryFragment on Query {
  global(relativePath: "index.json") {
    ...GlobalParts
  }
}
    ${GlobalPartsFragmentDoc}`;
export const BlogPartsFragmentDoc = gql`
    fragment BlogParts on Blog {
  seo {
    __typename
    title
    description
    canonical
    seoImg
    partialSeoImage
    cardType
  }
  title
  tags
  category
  heroImg
  excerpt
  date
  body
}
    `;
export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  seo {
    __typename
    title
    description
    canonical
    seoImg
    partialSeoImage
    cardType
  }
  title
  blocks {
    __typename
    ... on PageBlocksBigTitle {
      title
      action {
        __typename
        title
        label
        href
      }
    }
    ... on PageBlocksBlog {
      header {
        __typename
        title
        subtitle
        link
        image
      }
      searchEnabled
      featuredEnabled
      tags
      count
    }
    ... on PageBlocksContent {
      body
    }
    ... on PageBlocksFeatures {
      title
      subTitle
      items {
        __typename
        title
        description
        icon
      }
    }
    ... on PageBlocksHero {
      title
      text
      image {
        __typename
        src
        alt
      }
    }
    ... on PageBlocksKeywordList {
      title
      keywords
    }
    ... on PageBlocksWiki {
      header {
        __typename
        title
        subtitle
        link
        image
      }
      searchEnabled
      tags
      count
    }
    ... on PageBlocksProducts {
      header {
        __typename
        title
        subtitle
        link
      }
      tags
      count
    }
  }
}
    `;
export const ProductPartsFragmentDoc = gql`
    fragment ProductParts on Product {
  title
  description
  link
  soon
  image
  tags
}
    `;
export const TagsPartsFragmentDoc = gql`
    fragment TagsParts on Tags {
  title
}
    `;
export const WikiPartsFragmentDoc = gql`
    fragment WikiParts on Wiki {
  seo {
    __typename
    title
    description
    canonical
    seoImg
    partialSeoImage
    cardType
  }
  title
  tags
  excerpt
  date
  body
}
    `;
export const ContentQueryDocument = gql`
    query contentQuery($relativePath: String!) {
  ...LayoutQueryFragment
  page(relativePath: $relativePath) {
    ...PageParts
  }
  blogConnection(sort: "date", last: -1) {
    edges {
      node {
        ...BlogParts
        id
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
      }
    }
  }
  wikiConnection(sort: "date", last: -1) {
    edges {
      node {
        ...WikiParts
        id
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
      }
    }
  }
  productConnection {
    edges {
      node {
        ...ProductParts
        id
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
      }
    }
  }
}
    ${LayoutQueryFragmentFragmentDoc}
${PagePartsFragmentDoc}
${BlogPartsFragmentDoc}
${WikiPartsFragmentDoc}
${ProductPartsFragmentDoc}`;
export const BlogPostQueryDocument = gql`
    query blogPostQuery($relativePath: String!) {
  ...LayoutQueryFragment
  blog(relativePath: $relativePath) {
    ...BlogParts
  }
  blogConnection(sort: "date", last: -1) {
    edges {
      node {
        ...BlogParts
        id
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
      }
    }
  }
}
    ${LayoutQueryFragmentFragmentDoc}
${BlogPartsFragmentDoc}`;
export const WikiQueryDocument = gql`
    query wikiQuery($relativePath: String!) {
  ...LayoutQueryFragment
  wiki(relativePath: $relativePath) {
    ...WikiParts
  }
}
    ${LayoutQueryFragmentFragmentDoc}
${WikiPartsFragmentDoc}`;
export const SitemapQueryDocument = gql`
    query sitemapQuery {
  ...LayoutQueryFragment
  pageConnection {
    edges {
      node {
        title
        id
        _sys {
          filename
        }
      }
    }
  }
  blogConnection {
    edges {
      node {
        title
        id
        date
        _sys {
          filename
        }
      }
    }
  }
  wikiConnection {
    edges {
      node {
        title
        id
        date
        _sys {
          filename
        }
      }
    }
  }
}
    ${LayoutQueryFragmentFragmentDoc}`;
export const BlogDocument = gql`
    query blog($relativePath: String!) {
  blog(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...BlogParts
  }
}
    ${BlogPartsFragmentDoc}`;
export const BlogConnectionDocument = gql`
    query blogConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: BlogFilter) {
  blogConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...BlogParts
      }
    }
  }
}
    ${BlogPartsFragmentDoc}`;
export const GlobalDocument = gql`
    query global($relativePath: String!) {
  global(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...GlobalParts
  }
}
    ${GlobalPartsFragmentDoc}`;
export const GlobalConnectionDocument = gql`
    query globalConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: GlobalFilter) {
  globalConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...GlobalParts
      }
    }
  }
}
    ${GlobalPartsFragmentDoc}`;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {
  pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export const ProductDocument = gql`
    query product($relativePath: String!) {
  product(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ProductParts
  }
}
    ${ProductPartsFragmentDoc}`;
export const ProductConnectionDocument = gql`
    query productConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ProductFilter) {
  productConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ProductParts
      }
    }
  }
}
    ${ProductPartsFragmentDoc}`;
export const TagsDocument = gql`
    query tags($relativePath: String!) {
  tags(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...TagsParts
  }
}
    ${TagsPartsFragmentDoc}`;
export const TagsConnectionDocument = gql`
    query tagsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: TagsFilter) {
  tagsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...TagsParts
      }
    }
  }
}
    ${TagsPartsFragmentDoc}`;
export const WikiDocument = gql`
    query wiki($relativePath: String!) {
  wiki(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...WikiParts
  }
}
    ${WikiPartsFragmentDoc}`;
export const WikiConnectionDocument = gql`
    query wikiConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: WikiFilter) {
  wikiConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...WikiParts
      }
    }
  }
}
    ${WikiPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      contentQuery(variables: ContentQueryQueryVariables, options?: C): Promise<{data: ContentQueryQuery, variables: ContentQueryQueryVariables, query: string}> {
        return requester<{data: ContentQueryQuery, variables: ContentQueryQueryVariables, query: string}, ContentQueryQueryVariables>(ContentQueryDocument, variables, options);
      },
    blogPostQuery(variables: BlogPostQueryQueryVariables, options?: C): Promise<{data: BlogPostQueryQuery, variables: BlogPostQueryQueryVariables, query: string}> {
        return requester<{data: BlogPostQueryQuery, variables: BlogPostQueryQueryVariables, query: string}, BlogPostQueryQueryVariables>(BlogPostQueryDocument, variables, options);
      },
    wikiQuery(variables: WikiQueryQueryVariables, options?: C): Promise<{data: WikiQueryQuery, variables: WikiQueryQueryVariables, query: string}> {
        return requester<{data: WikiQueryQuery, variables: WikiQueryQueryVariables, query: string}, WikiQueryQueryVariables>(WikiQueryDocument, variables, options);
      },
    sitemapQuery(variables?: SitemapQueryQueryVariables, options?: C): Promise<{data: SitemapQueryQuery, variables: SitemapQueryQueryVariables, query: string}> {
        return requester<{data: SitemapQueryQuery, variables: SitemapQueryQueryVariables, query: string}, SitemapQueryQueryVariables>(SitemapQueryDocument, variables, options);
      },
    blog(variables: BlogQueryVariables, options?: C): Promise<{data: BlogQuery, variables: BlogQueryVariables, query: string}> {
        return requester<{data: BlogQuery, variables: BlogQueryVariables, query: string}, BlogQueryVariables>(BlogDocument, variables, options);
      },
    blogConnection(variables?: BlogConnectionQueryVariables, options?: C): Promise<{data: BlogConnectionQuery, variables: BlogConnectionQueryVariables, query: string}> {
        return requester<{data: BlogConnectionQuery, variables: BlogConnectionQueryVariables, query: string}, BlogConnectionQueryVariables>(BlogConnectionDocument, variables, options);
      },
    global(variables: GlobalQueryVariables, options?: C): Promise<{data: GlobalQuery, variables: GlobalQueryVariables, query: string}> {
        return requester<{data: GlobalQuery, variables: GlobalQueryVariables, query: string}, GlobalQueryVariables>(GlobalDocument, variables, options);
      },
    globalConnection(variables?: GlobalConnectionQueryVariables, options?: C): Promise<{data: GlobalConnectionQuery, variables: GlobalConnectionQueryVariables, query: string}> {
        return requester<{data: GlobalConnectionQuery, variables: GlobalConnectionQueryVariables, query: string}, GlobalConnectionQueryVariables>(GlobalConnectionDocument, variables, options);
      },
    page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      },
    product(variables: ProductQueryVariables, options?: C): Promise<{data: ProductQuery, variables: ProductQueryVariables, query: string}> {
        return requester<{data: ProductQuery, variables: ProductQueryVariables, query: string}, ProductQueryVariables>(ProductDocument, variables, options);
      },
    productConnection(variables?: ProductConnectionQueryVariables, options?: C): Promise<{data: ProductConnectionQuery, variables: ProductConnectionQueryVariables, query: string}> {
        return requester<{data: ProductConnectionQuery, variables: ProductConnectionQueryVariables, query: string}, ProductConnectionQueryVariables>(ProductConnectionDocument, variables, options);
      },
    tags(variables: TagsQueryVariables, options?: C): Promise<{data: TagsQuery, variables: TagsQueryVariables, query: string}> {
        return requester<{data: TagsQuery, variables: TagsQueryVariables, query: string}, TagsQueryVariables>(TagsDocument, variables, options);
      },
    tagsConnection(variables?: TagsConnectionQueryVariables, options?: C): Promise<{data: TagsConnectionQuery, variables: TagsConnectionQueryVariables, query: string}> {
        return requester<{data: TagsConnectionQuery, variables: TagsConnectionQueryVariables, query: string}, TagsConnectionQueryVariables>(TagsConnectionDocument, variables, options);
      },
    wiki(variables: WikiQueryVariables, options?: C): Promise<{data: WikiQuery, variables: WikiQueryVariables, query: string}> {
        return requester<{data: WikiQuery, variables: WikiQueryVariables, query: string}, WikiQueryVariables>(WikiDocument, variables, options);
      },
    wikiConnection(variables?: WikiConnectionQueryVariables, options?: C): Promise<{data: WikiConnectionQuery, variables: WikiConnectionQueryVariables, query: string}> {
        return requester<{data: WikiConnectionQuery, variables: WikiConnectionQueryVariables, query: string}, WikiConnectionQueryVariables>(WikiConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    const data = await client.request({
      query: doc,
      variables: vars,
    });

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql", queries }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

  